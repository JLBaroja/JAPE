\ Concurrent VI-VI Schedule
\ JosÃ© Luis Baroja
\ June 2017

\ 
\ 
\ 

\ Program main parameters:
\ 
\ 
\ 

\ Lab Configuration
\ inputs
\ 1: Center key 
\ 2: Left key
\ 3: Right key
\ outputs
\ 1: Center light - white
\ 2: Center light - red
\ 3: Center light - green
\ 4: Center light - blue
\ 5: Left light - white
\ 6: Left light - red
\ 7: Left light - green
\ 8: =none=
\ 9: Right light - white
\ 10: Right light - red
\ 11: Right light - green
\ 12: Feeder
\ 13: =none=
\ 14: Chamber light
\ 15: Tone
\ 16: Click

\ Experiment Configuration
\inputs
^central_key=1
^left_key=2
^right_key=3
\outputs
^central_light=1
^feeder=12
^left_light=5
^right_light=9
^chamber_light=14

\variables
\T: session time (sec/100)
\E: index of array A (real time events)
\F: index of array Z (real time z-pulses)

\lists
LIST L = 5000,2500 \ Probability reinforcer scheduled in left at each second 
LIST R = 1000,8000 \ Same probability for right

\arrays
DIM A = 10000 \ Real time events
DIM Z = 500 \ Real time z-pulses
DIM C = 5 \ Counters
	\ C(0) = Number responses central_key
	\ C(1) = Number responses left_key
	\ C(2) = Number responses right_key
	\ C(3) = Number of reinforcers from left
	\ C(4) = Number of reinforcers from right

\ Z-pulses
\ Z1: 
\ Z2: 
\ Z3: 
\ Z4: 

\event key (real Time array)
\T.01: Session start
\T.02: Session end
\T.11: Response in central key 
\T.12: Response in left key
\T.13: Response in right key
\T.21: Central light ON
\T.22: Left light ON
\T.23: Right light ON
\T.24: Feeder ON
\T.25: Chamber light ON
\T.31: Central light OFF
\T.32: Left light OFF
\T.33: Right light OFF
\T.34: Feeder OFF
\T.35: Chamber light OFF 

\T.54: Feeder ON from LEFT
\T.64: Feeder ON from RIGHT
\T.74: Reinforcer scheduled in LEFT
\T.84: Reinforcer scheduled in RIGHT



\ Session start; main time counter
S.S.1,
S1,
#START: set E = 0;
	set F = 0;
	set T = 0;
	set C(0) = 0;
	set C(1) = 0;
	set C(2) = 0;
	set C(3) = 0;
	set C(4) = 0;
	add E; set A(E-1)=T+.01; \ Session starts
	off^chamber_light; add E; set A(E-1)=T+0.35 ---> S2

S2,
8": on^left_light; on^right_light; 
	Z1; add F; set Z(F-1)=T+0.001 ---> S3

S3,
0.01": add T;
	if T=12000[@finish,@keepgoing]
	@finish: add E; set A(E-1)=T+0.02 ---> STOPABORTFLUSH \Session finishes
	@keepgoing: ---> SX



S.S.2, \ LEFT key
S1,
#Z1: ---> S2

S2,
1": WITHPI=L(0)[@scheduled,@notscheduled]
	@scheduled: add E; set A(E-1)=T+0.74 ---> S3 \ Reinforce next response in LEFT
	@notscheduled: ---> SX

S3,
#R^left_key: add C(3); add E; set A(E-1)=T+0.54; \ Reinforcer from LEFT 
	Z3; add F; set Z(F-1)=T+0.003 ---> S2 \ Consider to S1 to prevent scheduling during feeder on
	


S.S.3, \ RIGHT key
S1,
#Z1: ---> S2

S2,
1": WITHPI=R(0)[@scheduled,@notscheduled]
	@scheduled: add E; set A(E-1)=T+0.84 ---> S3 \ Reinforce next response in RIGHT
	@notscheduled: ---> SX

S3,
#R^right_key: add C(4); add E; set A(E-1)=T+0.64; \ Reinforcer from RIGHT 
	Z3; add F; set Z(F-1)=T+0.003 ---> S2 \ Consider to S1 to prevent scheduling during feeder on
	


\ Feeder
S.S.4, 
S1, 
#Z3: on^feeder; add E; set A(E-1)=T+0.24 ---> S2

S2,
3": off^feeder; add E; set A(E-1)=T+0.34;
	add C(3) ---> S1
\	Z1; add F; set Z(F-1)=T+0.001 ---> S1 \ To reset both alternatives (not good idea though)



\ Recording all LEFT responses
S.S.5,
S1,
#R^left_key: add E; set A(E-1)=T+0.12;
	 add C(1); SHOW 3, resp_left, C(1) ---> SX



\ Recording all RIGHT responses
S.S.6,
S1,
#R^right_key: add E; set A(E-1)=T+0.13;
	add C(2); SHOW 4, resp_right, C(2) ---> SX


 
\ Recording all CEN responses
S.S.7,
S1,
#R^central_key: add E; set A(E-1)=T+0.11;
	add C(0); SHOW 5, resp_central, C(0) ---> SX

